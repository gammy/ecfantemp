#!/usr/bin/env bash
# This is a fan / temperature control helper for ectool.
# By gammy, anno 2024. To reach me, try https://github.com/gammy
#
# If you don't need ectool to control your fan, this probably isn't for you.
# I wrote this to control the fan on my AMD Framework 13 laptop.
# G**gle Chromebewks also use it, which is, I suppose, why ectool exists.
#
# This was born out of pure frustration and was hacked together rather hastily.
# Don't judge me, Judge the ectool authors for that clusterf*ck.
#
# See `assert_deps` below for dependencies (ectool is required!)
#
# Copyright (C) 2024 Kristian Gunstone
# Use of this source code is governed by the Simplified BSD License:
# https://opensource.org/license/bsd-2-clause

DEFAULT_MAX_RPM=7000 # Seems to be the maximum on my Framework 13
ECF_VERSION=0.9devel1

# Set a default parameters if not specified and not set in the shell
[ -n "$ECF_MAX_RPM" ] && ECF_RPM_NAG_OFF=stfu
[ -z "$ECF_MAX_RPM" ] && ECF_MAX_RPM=$DEFAULT_MAX_RPM
[ -z "$ECF_TEMP_UNIT" ] && ECF_TEMP_UNIT=C
[ -z "$ECF_WATCH_INTERVAL" ] && ECF_WATCH_INTERVAL=2
[ -z "$ECF_RPM_WIDTH" ] && ECF_FAN_BAR_WIDTH=23
[ -z "$ECF_RPM_GLYPHS" ] && ECF_RPM_GLYPHS='[= ]' # Fun alts: '▕▒░▏', '▐▒░▌'
[ -z "$ECF_SPARSE" ] && ECF_SPARSE=

assert_deps() {
    local dep
    for dep in ectool bash column sudo bc mktemp seq; do
        if ! which $dep > /dev/null 2>&1; then
            local deps_missing=1
            echo "I need '$dep' to work." >&2
        fi
    done

    [ -n "$deps_missing" ] && exit 1
}

usage() {
    local me=$(basename "$0")
    cat << EOF
$me v$ECF_VERSION
An ectool wrapper to simplify fan / temperature reading and configuration.

It displays and accepts temperature parameters in Celsius, Fahrenheit or Kelvin
and doesn't force you to set *all* the bloody thermal parameters every time
you want to change a single setting. Unlike 'ectool' that was clearly written
to be used solely by robots, this script tries to make its use more appropriate
for human beings.

A temperature parameter that ends with K, C or F will be auto-converted.
The 'show', 'watch' and 'info' options also accept a unit as an argument.
The environment variable ECF_TEMP_UNIT can be overridden to change the
default unit; it's currently set to $ECF_TEMP_UNIT.

When run without options, 'show \$ECF_TEMP_UNIT' is issued.
Several environment variables can be set to alter the behaviour of $me:
ECF_TEMP_UNIT, ECF_MAX_RPM, ECF_RPM_NAG_OFF, ECF_SHOW_CALL, ECF_WATCH_RATE,
ECF_FAN_BAR_WIDTH, and ECF_RPM_GLYPHS ('$ECF_RPM_GLYPHS') and ECF_SPARSE.
RTFS for more info.

Usage:
  $me <watch|show|info|set> [options] [option] [..]

Options:
  show    Show the current sensor temperatures, fan speed(s) and common info.
  watch   Same as 'show' but runs in a loop a la 'watch'.
  info    Show the thermal parameters/values for warn, high, halt, off and max.
  set     Set fan or sensor parameters. The syntax is one of:
          fan    <speed in RPM or off/auto/max> [fan ID]
          sensor <sensor number> <warn|high|halt|off|max> <degrees[unit]>

Examples:
    $me show
    $me set fan 5000   # set fan 0 to 5000 RPM
    $me set fan auto 2 # set fan 2 to automatic control
    $me set sensor 1 warn 90C
    $me watch K
    $me info C

When the fan speed is set to 'auto', the firmware sets the fan duty cycle
with the following formula clamped between 0 and 100:
  100 * (Temperature - Fan Off) / (Fan Max - Fan Off)
Which seems like a pretty stupid formula if you ask me, but it is what it is.
The parameters in this formula can be viewed with '$me info'.
You won't learn which sensor the automatic control feature uses though. Nice.

EOF
}

calc_f() {
    local format="$1"
    local formula="$2"
    local sum=$(echo "$formula" | bc -l)
    # `printf` is useful: It'll include the leading zero even when `bc`
    # omits it, it'll round the number upwards, and it provides arbit/drawrary
    # precision in the output, including just returning an integer.
    printf "$format" "$sum"
}

portion_f() {
    local format="$1"
    local value="$2"
    local total="$3"
    local factor="$4"
    calc_f "$format" "(($value) / ($factor)) * ($total)"
}

calc_ratio() {
    local now="$1"
    local min="$2"
    local max="$3"

    if [ "$min" = "$max" ]; then
        echo -n "Min=Max"
        return
    fi

   local ratio=$(calc_f "%.1f" "(100 * ($now - $min) / ($max - $min))")
   local ratio_int=${ratio/.*}
   (( ratio_int < 0 )) && ratio="0.0 [?]" # Usually the result of a FW fault
   echo -n "$ratio"
}

sep_val_unit() {
    local input="$1"
    local last=${input: -1}
    local output=${input::-1}
    local unit

    case $last in
        c|C) unit=C ;;
        f|F) unit=F ;;
        k|K) unit=K ;;
        *)   unit="$ECF_TEMP_UNIT"
             output="$input" ;;
    esac
    echo "$output $unit"
}

unit_to_kelvin() {
    local val="$1"
    local unit="$2"
    local kelvin="$val" # Assume input is kelvin

    case $unit in
        c|C) val=$(calc_f "%f" "273.15 + $val") ;;
        f|F) val=$(calc_f "%f" "273.15 + ($val - 32) * 5 / 9") ;;
        k|K) true ;;
        *) true ;;
    esac

    # ectool doesn't like decimals, so we chop them off completely.
    printf "%.0f\n" "$val"
}

kelvin_to_unit() {
    local kelvin="$1"
    local unit="$2"

    case $unit in
        c|C) kelvin=$(calc_f "%f" "$kelvin - 273.15") ;;
        f|F) kelvin=$(calc_f "%f" "($kelvin -273.15) * 9 / 5 + 32") ;;
        k|K) ;;
        *) ;;
    esac

    printf "%.2f\n" "$kelvin"
}

repeat() {
    local text="$1"
    local count=${2/.*} # Allow fractions
    local buf i
    for ((i = 0; i < count; i++)); do
        buf="$buf$text"
    done
    echo -n "$buf"
}

draw_bar() {
    local current="$1"
    local maximum="$2"
    local width="($3-2)"; # Defer subtraction of endstops ('[]')
    local beg_gfx="${ECF_RPM_GLYPHS:0:1}"
    local bar_gfx="${ECF_RPM_GLYPHS:1:1}"
    local pad_gfx="${ECF_RPM_GLYPHS:2:1}"
    local end_gfx="${ECF_RPM_GLYPHS:3:1}"
    [[ "$current" -gt "$maximum" ]] && maximum="$current" # Basic sanity
    local num_blocks=$(portion_f "%.0f" "$current" "$width" "$maximum")
    local num_blanks=$(portion_f "%.0f" "($maximum-$current)" "$width" "$maximum")
    ((num_blocks == num_blanks)) && ((num_blanks++))
    local filled_gfx=$(repeat "$bar_gfx" "$num_blocks")
    local padded_gfx=$(repeat "$pad_gfx" "$num_blanks")
    echo -n "${beg_gfx}${filled_gfx}${padded_gfx}${end_gfx}"
}

thermal_set() {
    local sensor="$1"
    local item="$2"

    local val_unit=($(sep_val_unit "$3"))
    local val="${val_unit[0]}"
    local unit="${val_unit[1]}"
    local val_k=$(unit_to_kelvin "$val" "$unit")
    local index

    case "$item" in
        warn) index=1 ;;
        high) index=2 ;;
        halt)
            echo "Careful: if you mess up the temperature for halt, \
your computer might instantly shut off";
            echo "PRESS ^C TO CANCEL OR RETURN TO CONTINUE"
            read
            index=3 ;;
        off) index=4 ;;
        max) index=5 ;;
        *)
            usage
            echo "Invalid item: '$item'"
            exit 1
            ;;
    esac

    thermal_conv "$sensor" "$unit"

    local cols=($(sudo ectool thermalget | head -n-1 | tail -n+2 \
        | grep "^\s*${sensor}\s"))
    local cols_old=("${cols[@]}")
    local oldval_k="${cols[$index]}"
    local oldval_u=$(kelvin_to_unit "$oldval_k" "$unit")


    if [ "$oldval_k" = "$val_k" ]; then
        printf "%s on sensor %s is already set to %s°%s (%sK)\n" \
            "$item" "$sensor" "$val" "$unit" "$val_k"
        return
    fi

    cols[$index]="$val_k"

    for col in "${cols[@]}"; do
        if [ -z "$col" ]; then
            echo "Error: Unexpected empty column in response!" >&2
            echo "Columns from 'ectool thermalget':" >&2
            for c in "${cols[@]}"; do
                [ -z "$c" ] && echo "'$c' <-- empty" >&2 || echo "'$c'" >&2
            done
            echo "Stopping." >&2
            exit 1
        fi
    done

    local k_warn="${cols[1]}"
    local k_high="${cols[2]}"
    local k_halt="${cols[3]}"
    local k_fan_off="${cols[4]}"
    local k_fan_max="${cols[5]}"

    # UGHhhhhhh you need to pass all the parameters! Come ON!
    # Usage: thermalset sensor warn [high [shutdown [fan_off [fan_max]]]]
    printf "Changing %s on sensor %s from %s°%s (%sK) to %s°%s (%sK):\n" \
        "$item" "$sensor" "$oldval_u" "$unit" "$oldval_k" "$val" "$unit" "$val_k"

    [ -n "$ECF_SHOW_CALL" ] && \
        echo "> ectool thermalset $sensor $k_warn $k_high $k_halt $k_fan_off $k_fan_max"
    sudo ectool thermalset "$sensor" "$k_warn" "$k_high" "$k_halt" "$k_fan_off" "$k_fan_max"

    thermal_conv "$sensor" "$unit" | grep -v ^Sensor
}

thermal_conv() {
    local only_sensor="$1"
    local unit="$2"
    [ -z "$unit" ] && unit=$ECF_TEMP_UNIT
    #[ "$one_sensor" = "all" ] && req_sensor=

    local thermalinfo=$(mktemp)
    local thermalinfoc=$(mktemp)

    [ -n "$ECF_SHOW_CALL" ] && echo "> ectool thermalget"
    sudo ectool thermalget > "$thermalinfo"

    cat "$thermalinfo" | head -n-1 | tail -n+2 | while read line; do
        cols=($line)
        sensor="${cols[0]}"
        [[ -n $only_sensor && $sensor -ne $only ]] && continue
        k_warn="${cols[1]}"
        k_high="${cols[2]}"
        k_halt="${cols[3]}"
        k_fan_off="${cols[4]}"
        k_fan_max="${cols[5]}"
        name="${cols[6]}"

        u_warn=$(kelvin_to_unit "$k_warn" "$unit")
        u_high=$(kelvin_to_unit "$k_high" "$unit")
        u_halt=$(kelvin_to_unit "$k_halt" "$unit")
        u_fan_off=$(kelvin_to_unit "$k_fan_off" "$unit")
        u_fan_max=$(kelvin_to_unit "$k_fan_max" "$unit")

        echo "$sensor ($name),\
${u_warn}°${unit} (${k_warn}K),\
${u_high}°${unit} (${k_high}K),\
${u_halt}°${unit} (${k_halt}K) ,\
${u_fan_off}°${unit} (${k_fan_off}K),\
${u_fan_max}°${unit} (${k_fan_max}K)" >> "$thermalinfoc"

    done

    rm "$thermalinfo"

    column -t -s ',' \
           -C name="Sensor" \
           -C name="Warn" \
           -C name="High" \
           -C name="Halt" \
           -C name="Fan Off(<=)" \
           -C name="Fan Max(>=)" \
           "$thermalinfoc"

    rm "$thermalinfoc"
}

show_temps()
{
    local unit="$1"
    [ -z "$unit" ] && unit=$ECF_TEMP_UNIT

    local tempinfo=$(mktemp)
    local index=0

    [ -n "$ECF_SHOW_CALL" ] && echo "> ectool temps all"
    # Parse the mangled inconsistent mess that ectool outputs
    sudo ectool temps all | tail -n+2 | sed 's/ and / /' | while read line; do
          cols=($line)
          name="${cols[0]}"
        temp_k="${cols[1]}"
      # temp_u="${cols[4]}" # Omg 'ectool temps' converts to C for us! Discard.
        temp_u=$(kelvin_to_unit "$temp_k" "$unit")
      #  ratio=${cols[6]} # ectool prints ratio as integers. Discard.

        if [ -z "$ECF_SPARSE" ]; then
            off_k=${cols[7]//[!0-9]}
            max_k=${cols[9]//[!0-9]}
            ratio=$(calc_ratio "$temp_k" "$off_k" "$max_k")
            off_u=$(kelvin_to_unit "$off_k" "$unit")
            max_u=$(kelvin_to_unit "$max_k" "$unit")
            printf "%d (%s),%s°%s (%sK),%s,%s°%s (%sK),%s°%s (%sK),\n" \
                   "$index"  "$name" \
                   "$temp_u" "$unit" "$temp_k" "$ratio" \
                   "$off_u"  "$unit" "$off_k" \
                   "$max_u"  "$unit" "$max_k" >> "$tempinfo"
        else
            echo "$index ($name),$temp_u°$unit" >> "$tempinfo"
        fi

        ((index++)) # 'ectool temps' neglects to print index.
    done

    local col_names=("Sensor" "Temperature")
    if [ -z "$ECF_SPARSE" ]; then
        col_names+=("Off-Max Ratio" "Fan Off(<=)" "Fan Max(>=)")
    fi

    local col_args=('-t' '-s' ",")
    for col in "${col_names[@]}"; do
        col_args+=("-C" name="$col")
    done

    column "${col_args[@]}" "$tempinfo"

    rm "$tempinfo"
    echo
}

show_fans() {
    [ -n "$ECF_SHOW_CALL" ] && echo "> ectool pwmgetfanrpm all"
    sudo ectool pwmgetfanrpm all | while read line; do
        cols=($line)
        fan_num="${cols[1]}"
        fan_rpm="${cols[3]}"
        duty_pct=$(portion_f "%.1f" "$fan_rpm" 100 "$ECF_MAX_RPM") # 1 decimal
        bar=$(draw_bar "$fan_rpm" "$ECF_MAX_RPM" "$ECF_FAN_BAR_WIDTH")
        printf "Fan #%d %s %d RPM (%1.1f%% duty)" \
            "$fan_num" "$bar" "$fan_rpm" "$duty_pct"
    done
    echo
}

show_select() {
    # TODO allow selecting one or more temps, or one or more fans!
    show_temps "$1"
    show_fans
}

#############################################################################

assert_deps

if [ $# -eq 0 ]; then
    echo "Issuing 'show' command, see -h for more." >&2
    echo
    cmd=show
else
    cmd="$1"
    shift
fi

if [[ "$cmd" = "show" || "$cmd" = "watch" || "$cmd" = "set" ]]; then
    if [ -z "$ECF_RPM_NAG_OFF" ]; then
        cat << EOF
Warn: The maximum fan RPM used to calculate the duty cycle is hardcoded to \
$ECF_MAX_RPM.
      Silence this warning by setting ECF_MAX_RPM or ECF_RPM_NAG_OFF.

EOF
    fi
fi

# I mean, why use an exhaustion loop and a case when you can do this...!

if [ "$cmd" = "set" ]; then
     opt=$1
     if [ "$opt" = "fan" ]; then
         val=$2
         fan_id="$3"
         if [ -z "$val" ]; then
             usage
             exit 1
         fi
         if [ -z "$fan_id" ]; then
            echo "No fan specified, using fan 0"
            fan_id=0
         fi
         if [ "$val" = "auto" ]
         then
             [ -n "$ECF_SHOW_CALL" ] && echo "> autofanctrl $fan_id"
             sudo ectool autofanctrl "$fan_id"
         else
             [ "$val" = "off" ] && val=0
             [ "$val" = "max" ] && val=$ECF_MAX_RPM
             fanrpm=${val//[!0-9]/}
             if [ -n "$fanrpm" ]; then
                 [ -n "$ECF_SHOW_CALL" ] && echo "> ectool pwmsetfanrpm $fan_id $fanrpm"
                 sudo ectool pwmsetfanrpm "$fan_id" "$fanrpm"
             else
                usage
                exit 1
             fi
         fi
     elif [ "$opt" = "sensor" ]; then
         if [ $# -ne 4 ]; then
             usage
             exit 1
         fi
         thermal_set "$2" "$3" "$4"
     else
        usage
        exit 1
     fi
elif [ "$cmd" = "show" ]; then
    show_select "$@"
elif [ "$cmd" = "watch" ]; then
    busy=1
    while [ -n "$busy" ]; do
        # Do some buffering; reduces flicker a bit
        buffer=$(clear; show_select "$@")
        echo -e "$buffer"
        read -t "$ECF_WATCH_INTERVAL" -n1 key
        [ "$key" = "q" ] && unset busy
    done
elif [ "$cmd" = "info" ]; then
    thermal_conv "" "$1"
else
     usage
     exit 1
fi
